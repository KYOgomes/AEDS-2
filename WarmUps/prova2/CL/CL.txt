/*Questões Abertas (V ou F)-> 

1- O custo de pesquisa em uma arvore binaria nunca será linear.: 
Falso, se a ordem de inserção em uma arvore for, o proximo maior que o anterios, ou ao contrario
seu custo será linear, O(n). 
pesquisa/inserção:
BST não balanceada-> O(1) melhor caso e O(n) pior caso
BST balanceada-> O(log) ambos casos


2- Toda arvore binaria de pesquisa com mais de 0 elementos, está organizada em formato heap ou heap invertido.:
falso, o heal/heap invertido garantem q os filhos serão menores que os pais, ou que os filhoes serão maiores que os pais
ja em uma arvore BST, a organização deve garantir que os menores estejam à esquerda e os maiores Á direita.


3- A ordem de complexidade do QUICKsort no pior caso será quadratica.: 
verdadeiro, O(n^2), ocorre quando o pivot escolhido é o maior elemento ou o menor elemento
O(n log n) no melhor caso, quando divide o array em partes iguais


4- O custo de pesquisa em uma arvore BALANCEADA, nunca pode ser linear.: 
verdadeiro, o custo de pesquisa de uma arvore binaria é O(log n)


5- O melhor algoritmo em termo de movimentações é o SELEÇãO, cuja complexidade é O(n log n).:
Falso, o algoritmo de SELEÇãO tem complexidade de O(n^2) e realiza 3N - 3 movimentações, devido ao swap, o melhor 
algotitmo seria o inserção, com complexidade de O(n²) no pior caso e O(n) no melhor caso. é um algoritmo ESTAVEL e 
realizaria 0 movimentações	


6- Se um array estiver pré-ordenado, o melhor metodo de ordenação seria o de inserção, com complexidade no melhor 
caso de O(n.):
verdadeiro, O algoritmo de inserção é o melhor para arrays pré ordenados pois nunca iria percorrer o arry mais de uma vez, 
tendo complexidade de O(n) melhor caso


7- No pior caso, a ordem de complexidade do HEAPsort sera quadratica:
falso, a complexidade do HEAPsort em todos os casos é O(n log n)


8- A ordem de complexidade do algoritmo de bolha sempre será de O(n^2), independente da ordenação inicial:
falso, se o array estiver previamente ordenado, a complexidade será de O(n), mas em seu pior e caso medio 
será de O(N^2)

9- mergesort O(n log n) pois sempre divide o array pela metade, ordena sub array, ESTAVEL.

------------------------ORDENAÇÕES------------------------------------------------------------------------
inserção:
Pior caso: O(n^2) quando o array está ordenado em ordem decrescente
Melhor caso: O(n)

public static void ordenacaoInsercao(int[] vetor)
    {
        for(int i = 1; i < vetor.length; i++)
        {
            int temp = vetor[i];
            int j = i - 1;
            while(j >= 0 && vetor[j]>temp)
            {
                vetor[j+1] = vetor[j];
                j--;
            }
            vetor[j+1] = temp;}}
-----------------------------------------------------------------------------
seleção:
Pior/melhor caso: O(n^2)
public static void ordenacaoSelecao(int[] vetor) {
        int n = vetor.length;
        for (int i = 0; i < n - 1; i++) {
            int menor = i;

            for (int j = i + 1; j < n; j++) {
                if (vetor[j] < vetor[menor]) {
                    menor = j;
                }}
            int temp = vetor[menor];
            vetor[menor] = vetor[i];
            vetor[i] = temp;}}
--------------------------------------------------------------------------
bolha:
Pior caso: O(n^2) quando o array está ordenado em ordem decrescente
Melhor caso: O(n)
for(int i = 0; i < n - 1; i++) {
            swapped = false; // Inicializa a flag como falso para esta iteração
            // Loop interno para comparar pares adjacentes e trocar, se necessário
            for (int j = 0; j < n - 1 - i; j++) {
                if (vetor[j] > vetor[j + 1]) {
                    // Troca os elementos
                    int temp = vetor[j];
                    vetor[j] = vetor[j + 1];
                    vetor[j + 1] = temp;
                    swapped = true; // Define a flag como true, indicando que ocorreu uma troca
                }
            }
            if (!swapped) {
                break;
            }
        }
        ou
        public static void Bubble(int vet[], int tam) {
        int temp;
        boolean controle = true;
        for (int i = 0; i < (tam - 1); i++) {
            if (vet[i] > vet[i + 1]) {
                temp = vet[i];
                vet[i] = vet[i + 1];
                vet[i + 1] = temp;
                controle = false;
            }}
        if (controle != true) {
            Bubble(vet, tam);}}
------------------------------------------------------------------------
quick:
Pior caso: O(n^2) quando o pivo escolhido é o maior ou menor elemento
Melhor caso: O(n log n)
private static void ordenaQuick(int[] array, int baixo, int alto) {
        if (baixo < alto) {
            int pivô = particionar(array, baixo, alto);
            ordenaQuick(array, baixo, pivô - 1);
            ordenaQuick(array, pivô + 1, alto);
        }
    }

    private static int particionar(int[] array, int baixo, int alto) {
        int pivô = array[alto];
        int i = baixo - 1;

        for (int j = baixo; j < alto; j++) {
            if (array[j] < pivô) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;}}

        int temp = array[i + 1];
        array[i + 1] = array[alto];
        array[alto] = temp;
        return i + 1;
    }
-------------------------------------------------------------------------------------
shell:
Melhor caso: array ordenado O(nlogn)
Pior caso: ordem decrescente O(n^2)
	void shellsort(){
		int h = 1;
		do{
			h = (h*3) + 1
		}while(h<n);
		do{
			h/=3;
			for(int cor=0; cor<h;cor++){
				insercaoPorCor(cor, h);
			}
		}while(h != 1);}
	void insercaoPorCor(int cor, int h){
		for(int i = (h+cor); i<n;i+=h){
			int tmp = array[i];
			int j = i-h;
			while((j>=0) && (array[j]>tmp)){
				array[j+h] = array[j];
				j -= h;
			}
			array[j+h] = tmp;
		}}
----------------------------------------------------------------------------------------------------------
                                        __QUESTOES PAPEL__
1- questão ARVORE de ARVORE) criar metodo contarPalavra que recebe 2 caracteres e conta o numero de palavras que começam com o 
primeiro caractere e terminam com o ultimo: 
class arvore{
    No raiz;
    (...)
    int pesquisar(char primeiro, char ultimo)
    {
        No no = pesquisar(primeiro, this.raiz);
        if(no == null || no.raiz == null)
        {
            return 0;
        }
        return contar(ultimo, no.raiz);
    }

    int contar(char ch, No2 i)
    {
        if(i != null)
        {
            int j = (ch == i.palavra.charAt(i.palavra.()-1))?1:0;
            j+=contar(ch, i.esq);
            j+=contar(ch, i.dir);
            return j;
        }
        return 0;
    }

    int contarPorNivel(char ch, no2 raiz)
    {
        int cont = 0;
        Queue<No2> fila = new Queue<x>;
        fila.add(raiz);
        while(!fila.isEmpty())
        {
            no2 no = fila.poll();
            if(no.palavra.chatAt(no.palavra.sin()-1)==ch)
            {
                cont ++;
            }
            if(no.esq !=null)
            {
                fila.add(no.esq);
            }
            if(no.dir !=null)
            {
                fila.add(no.dir);
            }
        }
        return cont;
    }
}


2- questao matriz flexivel em C) ordenar decrescente e adicionar na lista que esta na matriz:
checarArvore(No * Noarvore, Celula cabeça, int pesquisado)
{
    if(NoArvore == null)
    {
        return;
    }
    if(pesquisado < NoArvore -> numero)
    {
        checarArvore(NoArvore->esq, cabeça, pesquisado);
    }
    else if(pesquisado > NoArvore-> numero)
    {
        checarArvore(NoArvore->dir, cabeça, pesquisado);
    }
    else { inserirCelula(cabeça, pesquisado)}
}

Celula * econtraRepetido(No * raiz, CelulaMatriz * inicio)
{
    Celula * cabeça = malloc(sizeof(Celula));

    CelulaMatriz * tempLinha = inicio;
    while(tempLinha != null)
    {
        CelulaMatriz * tempColuna = tempLinha;
        while(tempColuna != null)
        {
            checarArvore(raiz, cabeçam tempColuna->numero);
            tempColuna = tempColuna-> prox;
        }
        tempLinha = tempLinha->inf;
    }
    return cabeça;
}

void inserirCelula(Celula cabeça, int chave)
{
    Celula * temp = cabeça;
    Celula * ins = malloc(sizeof(Celula));
    ins-> numero = chave;

    while(temp->prox != null)
    {
        if(chave > temp->prox.numero)
        {
            Celula * op = temp->prox;
            temp->ins;
            ins->prox = op;
            return;
        }
        temp = temp->prox;
    }
    temp->prox = ins;
}

3- percorrer uma matriz flexivel, e em cada no da matriz tem uma lista, remover os numero impares da lista: 
import java.util.Iterator;
public void caminhar() {
        Celula atual = matriz[0][0]; // Começar pela célula superior esquerda
        while (atual != null) {
            // Realize alguma operação com a célula atual
            atual.removerImpar();
            
            // Navegar para a próxima célula na linha
            if (atual.prox != null) {
                atual = atual.prox;
            } else {
                // Mover para a próxima linha
                if (atual.baixo != null) {
                    atual = atual.baixo;
                    // Ir para o início da linha
                    while (atual.ant != null) {
                        atual = atual.ant;
                    }
                } else {
                    // Fim da matriz
                    break;
                }}}}

public void removerImpar() {
        Iterator<Integer> it = valores.iterator();
        while (it.hasNext()) {
            if (it.next() % 2 != 0) {
                it.remove();
            }}}

4- Implementar treesort e falar a complexidade:
public void insert(int value) {
        root = insertRec(root, value);
    }
    private TreeNode insertRec(TreeNode root, int value) {
        if (root == null) {
            root = new TreeNode(value);
            return root;
        }
        if (value < root.value) {
            root.left = insertRec(root.left, value);
        } else if (value > root.value) {
            root.right = insertRec(root.right, value);
        }
        return root;
    }
    public void inorderTraversal(TreeNode node, List<Integer> sortedList) {
        if (node != null) {
            inorderTraversal(node.left, sortedList);
            sortedList.add(node.value);
            inorderTraversal(node.right, sortedList);
        }
    }
Complexidade de O(n log n) melhor caso e O(n^2) pior caso.

5- Lista de Pilha, percorrer a lista , depois Percorrer a pilha em cada CelulaLista e retornar no final qual das pilhas tem mais elementos
//contar elementos da pilha
int contarElementos() {
        int contador = 0;
        CelulaPilha atual = topo;
        while (atual != null) {
            contador++;
            atual = atual.prox;
        }
        return contador;}
//pilha com mais elementos
CelulaLista encontrarPilhaComMaisElementos() {
        CelulaLista atual = inicio;
        CelulaLista pilhaMaior = null;
        int maxElementos = 0;

        while (atual != null) {
            int quantidade = atual.contarElementos();
            if (quantidade > maxElementos) {
                maxElementos = quantidade;
                pilhaMaior = atual;
            }
            atual = atual.prox;
        }
        return pilhaMaior;}      
    
6- Arvore de Arvore em JAVA, pegar uma palavra chave de referencia, Contar quantas palavras na arvore de arvores começam com a letra da palavra
chave e tem a mesma quantidade de caracteres: 

NoChar buscar(String palavra) {
        char letra = palavra.charAt(0);
        NoChar no = buscarRec(raiz, letra);
        if (no != null) {
            int count = contarPalavras(no, palavra.length());
            System.out.println(count);
        } else {
            System.out.println("letra nao existe.");
        }
        return no;
    }
    private NoChar buscarRec(NoChar raiz, char letra) {
        if (raiz == null || raiz.letra == letra) {
            return raiz;
        }
        if (letra < raiz.letra) {
            return buscarRec(raiz.esquerda, letra);
        }
        return buscarRec(raiz.direita, letra);
    }

    private int contarPalavras(NoChar no, int tamanho) {
        int contador = 0;
        NoPalavra atual = No.palavras;
        while (atual != null) {
            if (atual.palavra.length() == tamanho) {
                contador++;
            }
            atual = atual.prox;
        }
        return contador;
    }

7- metodo que recebe 2 arrays e retorna 1 só ordenado: 

public static int[] vetorOrdenado(int[] vetA, int[] vetB) {
        int[] arrayCombinado = new int[vetA.length + vetB.length];
        for (int i = 0; i < vetA.length; i++) {
            combinedArray[i] = vetA[i];}

        for (int i = 0; i < vetB.length; i++) {
            combinedArray[vetA.length + i] = vetB[i];}

        // Ordenar o array combinado com inserção pois uma parte ja esta ordenada
        for(int i = 1; i < arrayCombinado.length; i++)
        {
            int temp = arrayCombinado[i];
            while(int j = i - 1; j >= 0 && arrayCombinado[j]>temp)
            {
                arrayCombinado[j+1] = arrayCombinado[j];
                j--;
            }
            arrayCombinado[j+1] = temp;}
        return combinedArray;}
    
8- Numa agenda de contados, pesquisar pelo nome e cpf da pessoa.:
public String pesquisarNo(String nome, No i) throws Exception{
        String resp = "false";
        char letra = Character.toUpperCase(nome.charAt(0));
        if(i == null){
            throw new Exception("Arvore vazia");
        }else if(i.getLetra() > letra){
            pesquisarNo(nome, i.getNoesq());
        }else if(i.getLetra() < letra){
            pesquisarNo(nome, i.getNodir());
        }else{
            resp = i.pesquisarContato(nome);
        }
        return resp;
    }

public String pesquisarNo(String cpf, No i) throws Exception {
    String resp = "Contato não encontrado";
    if (i == null) {
        throw new Exception("Árvore vazia");
    } else if (i.getCpf().compareTo(cpf) > 0) {
        resp = pesquisarNo(cpf, i.getNoesq());
    } else if (i.getCpf().compareTo(cpf) < 0) {
        resp = pesquisarNo(cpf, i.getNodir());
    } else {
        resp = i.pesquisarContato(cpf);
    }
    return resp;
}

9- caminha por uma matriz flexivel considerando que já temos os contrutores feitos e retorna a posição caso encontre um valor:
public void caminhaMatriz(int valor) {
        matrizNo linhaTemp = inicio;
        int i , j;   i = j = 0;
        while (linhaTemp != null) {
            matrizNo colunaTemp = linhaTemp; 
            while (colunaTemp != null) {
            System.out.println("Matriz Pos [" + i + "][" + j + "]:");
                if (colunaTemp.root != null) {
                    colunaTemp.printRoot(); // Printa a BST associada ao nó
                    if (colunaTemp.buscar(valor)) {
                        System.out.println("Valor " + valor + " encontrado na posição [" + i + "][" + j + "].");
                        return true;
                    }
                }
                colunaTemp = colunaTemp.right; // Vai para a direita
                j++;
            }
            linhaTemp = linhaTemp.down; // Vai para baixo
            i++;
            j = 0;
        }return false;}

